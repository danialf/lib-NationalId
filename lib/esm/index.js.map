{"version":3,"sources":["../../src/index.ts"],"names":["NationalId","value","isValid","Value","toString","getSectorCode","getUID","getParity","_value","undefined","_isValid","IsValid","substring","NotValid","isNaN","Number","length","c","parseInt","charAt","n","r"],"mappings":"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","sourcesContent":["/**\r\n * NationalId class\r\n */\r\nclass NationalId {\r\n  private _value: string\r\n  private _isValid: boolean\r\n\r\n  /**\r\n   * NationalId constructor\r\n   * @param value NationalId value as string\r\n   * @param isValid pass in true if you are sure this instance is valid and you would like to skip internal validation.\r\n   *  otherwise, internal validation would be triggered\r\n   */\r\n  constructor(value: string, isValid?: boolean) {\r\n    this._value = value\r\n\r\n    if (isValid == undefined) {\r\n      this._isValid = NationalId.IsValid(value)\r\n    } else {\r\n      this._isValid = isValid\r\n    }\r\n  }\r\n\r\n  /**\r\n   * get nationalId UID\r\n   */\r\n  public get getUID(): string {\r\n    return this.Value.substring(3, 9)\r\n  }\r\n  /**\r\n   * get parity code\r\n   */\r\n  public get getParity(): string {\r\n    return this.Value[9]\r\n  }\r\n\r\n  /**\r\n   * get sector code for national Id\r\n   */\r\n  public get getSectorCode(): string {\r\n    return this.Value.substring(0, 3)\r\n  }\r\n\r\n  /**\r\n   * returns validity of national id isntance\r\n   */\r\n  public get IsValid(): boolean {\r\n    return this._isValid\r\n  }\r\n\r\n  /**\r\n   * National id Value\r\n   */\r\n  public get Value(): string {\r\n    return this._value\r\n  }\r\n\r\n  /**\r\n   * Not valid national id instance\r\n   * @static\r\n   */\r\n  public static NotValid = new NationalId('XXXXXXXXXX', false)\r\n\r\n  public ToString = () => {\r\n    return this.Value.toString()\r\n  }\r\n\r\n  /**\r\n   * Format national id with following format XXX-XXXXXX-X\r\n   * @returns Formatted NationalId\r\n   *\r\n   */\r\n  public ToFormattedString = () => {\r\n    return `${this.getSectorCode}-${this.getUID}-${this.getParity}`\r\n  }\r\n\r\n  /**\r\n   * create new instance of national id\r\n   * @param value national id value\r\n   * @returns new national id instance if it is valid or NationalId.NotValid instance\r\n   * @static\r\n   */\r\n  public static create(value: string): NationalId {\r\n    if (this.IsValid(value)) {\r\n      return new NationalId(value.toString(), true)\r\n    }\r\n    return NationalId.NotValid\r\n  }\r\n\r\n  /**\r\n   * Validate national id\r\n   * @param value National Id value\r\n   * @returns true whether provided national id is valid\r\n   */\r\n  public static IsValid(value: any): boolean {\r\n    if (value === undefined) return false\r\n\r\n    if (value === '') return false\r\n\r\n    // validate is number\r\n    if (isNaN(Number(value))) {\r\n      return false\r\n    }\r\n\r\n    // validate length\r\n    // input format must match 0000000000\r\n    if (value.length !== 10) {\r\n      return false\r\n    }\r\n\r\n    // examp validation\r\n    if (\r\n      // 1111111111 is valid\r\n      //v === '1111111111' ||\r\n      value === '0000000000' ||\r\n      value === '2222222222' ||\r\n      value === '3333333333' ||\r\n      value === '4444444444' ||\r\n      value === '5555555555' ||\r\n      value === '6666666666' ||\r\n      value === '7777777777' ||\r\n      value === '8888888888' ||\r\n      value === '9999999999' ||\r\n      value === '0123456789'\r\n    ) {\r\n      return false\r\n    }\r\n\r\n    // calculate national Id\r\n    const c = parseInt(value.charAt(9))\r\n\r\n    const n =\r\n      parseInt(value.charAt(0)) * 10 +\r\n      parseInt(value.charAt(1)) * 9 +\r\n      parseInt(value.charAt(2)) * 8 +\r\n      parseInt(value.charAt(3)) * 7 +\r\n      parseInt(value.charAt(4)) * 6 +\r\n      parseInt(value.charAt(5)) * 5 +\r\n      parseInt(value.charAt(6)) * 4 +\r\n      parseInt(value.charAt(7)) * 3 +\r\n      parseInt(value.charAt(8)) * 2\r\n    const r = n % 11\r\n    if (\r\n      (r === 0 && r === c) ||\r\n      (r === 1 && c === 1) ||\r\n      (r > 1 && c === 11 - r)\r\n    ) {\r\n      return true\r\n    }\r\n\r\n    return false\r\n  }\r\n}\r\n\r\nexport default NationalId\r\n"],"file":"index.js"}